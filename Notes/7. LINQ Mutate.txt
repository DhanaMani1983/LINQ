###############################################
LINQ Mutate
###############################################


Source:https://www.dotnetperls.com/linq

Where: is used to filter from a collection

 This is a keyword used inside queries. It is used in generic type constraints. 
And Where() is a method that filters elements from a collection.
 //
        // Example array that contains unwanted null and empty strings.
        //
        string[] array = { "dot", "", "net", null, null, "perls", null };
        //
        // Use Where method to remove null strings.
        //
        var result1 = array.Where(item => item != null);
        foreach (string value in result1)
        {
            Console.WriteLine(value);
        }
        //
        // Use Where method to remove null and empty strings.
        //
        var result2 = array.Where(item => !string.IsNullOrEmpty(item));
        foreach (string value in result2)
        {
            Console.WriteLine(value);
        }

Zip. The Zip extension method acts upon two collections. It processes each element in two series together. 
With a Func instance, we use Zip to handle elements from two C# collections in parallel.
Extension
Func
Example. In this program, we declare 2 arrays of 5 integer elements each. 
Then, we invoke the Zip method. The first argument to the Zip method is the secondary array we want to process in parallel.
Int Array
And:
The second argument to the Zip method is a lambda expression that describes a Func instance.

 // Two source arrays.
        var array1 = new int[] { 1, 2, 3, 4, 5 };
        var array2 = new int[] { 6, 7, 8, 9, 10 };

        // Add elements at each position together.
        var zip = array1.Zip(array2, (a, b) => (a + b));

        // Look at results.
        foreach (var value in zip)
        {
            Console.WriteLine(value);
        }


Union. This computes mathematical unions. This extension method, from System.Linq, acts upon 2 collections. 
It returns a new collection that contains the elements that are found.

 // Create two example arrays.
        int[] array1 = { 1, 2, 3 };
        int[] array2 = { 2, 3, 4 };
        // Union the two arrays.
        var result = array1.Union(array2);
        // Enumerate the union.
        foreach (int value in result)
        {
            Console.WriteLine(value);
        }

SingleOrDefault is similar to Single. On empty collections, it returns the default value for the type. 
With it you receive the single matching element, or the default value if no element is found.

int[] array = { 1, 2, 3 };

        // Default is returned if no element found.
        int a = array.SingleOrDefault(element => element == 5);
        Console.WriteLine(a);

        // Value is returned if one is found.
        int b = array.SingleOrDefault(element => element == 1);
        Console.WriteLine(b);

        try
        {
            // Exception is thrown if more than one is found.
            int c = array.SingleOrDefault(element => element >= 1);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.GetType());
        }






