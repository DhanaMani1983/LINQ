###############################################
LINQ Mutate
###############################################


Source:https://www.dotnetperls.com/linq

AsParallel. Query expressions can be run in parallel. With the AsParallel extension method, we enable parallel threads to improve performance.
We show a method that becomes twice as fast on a dual-core machine when AsParallel is used.

static int SumDefault(int[] array)
    {
        /*
         *
         * Sum all numbers in the array.
         *
         * */
        return array.Sum();
    }

    static int SumAsParallel(int[] array)
    {
        /*
         *
         * Enable parallelization and then sum.
         *
         * */
        return array.AsParallel().Sum();
    }

    static void Main()
    {
        // Generate array.
        int[] array = Enumerable.Range(0, short.MaxValue).ToArray();

        // Test methods.
        Console.WriteLine(SumAsParallel(array));
        Console.WriteLine(SumDefault(array));

        const int m = 10000;
        var s1 = Stopwatch.StartNew();
        for (int i = 0; i < m; i++)
        {
            SumDefault(array);
        }
        s1.Stop();
        var s2 = Stopwatch.StartNew();
        for (int i = 0; i < m; i++)
        {
            SumAsParallel(array);
        }
        s2.Stop();
        Console.WriteLine(((double)(s1.Elapsed.TotalMilliseconds * 1000000) /
            m).ToString("0.00 ns"));
        Console.WriteLine(((double)(s2.Elapsed.TotalMilliseconds * 1000000) /
            m).ToString("0.00 ns"));
        Console.Read();
    }

AsEnumerable. The IEnumerable interface is a generic interface. This means it defines a template that types can implement for looping. 
The AsEnumerable method is a generic method. It allows you to cast a specific type to its IEnumerable equivalent.

 int[] array = new int[2];
        array[0] = 5;
        array[1] = 6;
        // Call AsEnumerable method.
        var query = array.AsEnumerable();
        foreach (var element in query)
        {
            Console.WriteLine(element);
        }

Cast. The Cast method casts every element. It is an extension method in the System.Linq namespace. 
It casts each element to the specified type. And the result is a collection of the desired type.

B[] values = new B[3];
        values[0] = new B();
        values[1] = new B();
        values[2] = new B();

        // Cast all objects to a base type.
        var result = values.Cast<A>();
        foreach (A value in result)
        {
            value.Y();
        }

Concat. This is an extension method. With it we take 2 IEnumerable collections. We then get a collection with all of the elements together.

int[] array1 = { 1, 3, 5 };
        int[] array2 = { 0, 2, 4 };

        // Concat array1 and array2.
        var result1 = array1.Concat(array2);
        foreach (int value in result1)
        {
            Console.WriteLine(value);
        }

Contains returns true or false. It indicates whether the IEnumerable collection has an element matching the argument. 
It acts upon any IEnumerable collection when the System.Linq namespace is included.

   var list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        // Use extension method.
        bool a = list.Contains<int>(7);
        // Use instance method.
        bool b = list.Contains(7);

DefaultIfEmpty handles empty collections in a special way. It returns a default value, not an error. 
With it, we replace empty collections with a singleton collection that may be more compatible with other parts of the C# program.

List<int> list = new List<int>();
        var result = list.DefaultIfEmpty();

        // One element in collection with default(int) value.
        foreach (var value in result)
        {
            Console.WriteLine(value);
        }

Distinct. This removes all duplicate elements in a collection. It returns only distinct (or unique) elements. 
The System.Linq namespace provides this extension method.

 // Declare an array with some duplicated elements in it.
        int[] array1 = { 1, 2, 2, 3, 4, 4 };
        // Invoke Distinct extension method.
        var result = array1.Distinct();
        // Display results.
        foreach (int value in result)
        {
            Console.WriteLine(value);
        }

Except subtracts elements from a collection. This extension method is found in the System.Linq namespace in the .NET Framework. 
It essentially subtracts all the elements in one collection from another.

// Contains four values.
        int[] values1 = { 1, 2, 3, 4 };

        // Contains three values (1 and 2 also found in values1).
        int[] values2 = { 1, 2, 5 };

        // Remove all values2 from values1.
        var result = values1.Except(values2);

        // Show.
        foreach (var element in result)
        {
            Console.WriteLine(element);
        }